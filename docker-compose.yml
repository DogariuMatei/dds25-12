version: "3"
services:

  event-bus:
    image: redis:7.2-bookworm
    command: redis-server --requirepass redis --maxmemory 512mb
    ports:
      - "6383:6379"

  gateway:
    image: nginx:1.25-bookworm
    volumes:
      - ./gateway_nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8000:80"
    depends_on:
      order-service:
          condition: service_started
      stock-service:
        condition: service_started
      payment-service:
        condition: service_started
      kafka:
        condition: service_healthy
      event-bus:
        condition: service_started

  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - '9094:9094'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
#      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
#      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
#    volumes:
#      - /path/to/kafka-persistence:/bitnami/kafka
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "kafka:9092" ]
      interval: 10s
      timeout: 10s
      retries: 5

  init-kafka:
    image: bitnami/kafka:latest
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics.sh --bootstrap-server kafka:9092 --list
      
      echo -e 'Creating kafka topics'
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic order --replication-factor 1 --partitions 1
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic stock --replication-factor 1 --partitions 1
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic payment --replication-factor 1 --partitions 1
      
      echo -e 'Successfully created the following topics:'
      kafka-topics.sh --bootstrap-server kafka:9092 --list
      "

#  kafka-0:
#    image: docker.io/bitnami/kafka:3.9
#    ports:
#      - "9092"
#    environment:
#      - KAFKA_CFG_NODE_ID=0
#      - KAFKA_CFG_PROCESS_ROLES=controller,broker
#      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
#      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
#      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
#      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
#      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
#      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
#      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
#      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3
#      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
#      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
#    volumes:
#      - kafka_0_data:/bitnami/kafka
#  kafka-1:
#    image: docker.io/bitnami/kafka:3.9
#    ports:
#      - "9092"
#    environment:
#      - KAFKA_CFG_NODE_ID=1
#      - KAFKA_CFG_PROCESS_ROLES=controller,broker
#      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
#      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
#      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
#      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
#      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
#      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
#      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
#      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3
#      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
#      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
#    volumes:
#      - kafka_1_data:/bitnami/kafka
#  kafka-2:
#    image: docker.io/bitnami/kafka:3.9
#    ports:
#      - "9092"
#    environment:
#      - KAFKA_CFG_NODE_ID=2
#      - KAFKA_CFG_PROCESS_ROLES=controller,broker
#      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
#      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
#      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
#      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
#      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
#      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
#      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
#      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3
#      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
#      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
#    volumes:
#      - kafka_2_data:/bitnami/kafka

  order-service:
    build: ./order
    image: order:latest
    environment:
      - STOCK_URL=http://stock-service:5000
    command: gunicorn -b 0.0.0.0:5000 -w 2 --timeout 30 --log-level=info app:app
    env_file:
      - env/order_redis.env
    depends_on:
      order-db:
        condition: service_started
      kafka:
        condition: service_healthy
      event-bus:
        condition: service_started
#    restart: on-failure

  order-db:
    image: redis:7.2-bookworm
    command: redis-server --requirepass redis --maxmemory 512mb
    ports:
      - "6380:6379"

  stock-service:
    build: ./stock
    image: stock:latest
    command: gunicorn -b 0.0.0.0:5000 -w 2 --timeout 30 --log-level=info app:app
    env_file:
      - env/stock_redis.env
    depends_on:
      stock-db:
        condition: service_started
      kafka:
        condition: service_healthy
#    restart: on-failure

  stock-db:
    image: redis:7.2-bookworm
    command: redis-server --requirepass redis --maxmemory 512mb
    ports:
      - "6381:6379"

  payment-service:
    build: ./payment
    image: user:latest
    command: gunicorn -b 0.0.0.0:5000 -w 2 --timeout 30 --log-level=info app:app
    env_file:
      - env/payment_redis.env
    depends_on:
      payment-db:
        condition: service_started
      kafka:
        condition: service_healthy
#    restart: on-failure

  payment-db:
    image: redis:7.2-bookworm
    command: redis-server --requirepass redis --maxmemory 512mb
    ports:
      - "6382:6379"

#volumes:
#  kafka_0_data:
#    driver: local
#  kafka_1_data:
#    driver: local
#  kafka_2_data:
#    driver: local